buildscript {
	repositories {
		mavenLocal()
		maven { url = "https://files.minecraftforge.net/maven" }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
	}
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.2.0"
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
}

apply from: 'buildtools/ColoredOutput.gradle'

apply plugin: 'net.minecraftforge.gradle'


version = version_major + '.' + version_minor + '.' + version_patch
group = "mezz.jei" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jei_" + mcversion

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
	version += ".${System.getenv().BUILD_NUMBER}"
}

// java version
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
	//version = mcversion + "-" + forgeversion
	//runDir = "run"
	//replace '@VERSION@', project.version

	mappings channel: 'snapshot', version: '20171003-1.12'

	accessTransformer = file('src/main/resources/META-INF/jei_at.cfg')

	// Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {

}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

	testCompile([
		group: "junit",
		name: "junit",
		version: "4.12"
	])
}

/*println "Project Version:---------------------${project.minecraft.version}"

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	//inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, that's not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	// Move access transformers to META-INF
	rename '(.+_at.cfg)', 'META-INF/$1'
}*/

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = new File("changelog.html")
	untaggedName = "Current release ${project.version}"
	fromCommit = "2fe051cf727adce1be210a46f778aa8fe031331e"
	toRef = "HEAD"
	templateContent = file("changelog.mustache").getText("UTF-8")
}

curseforge {
	apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
	project {
		id = curse_project_id
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'beta'
	}
}

afterEvaluate {
	tasks.curseforge238222.dependsOn.add(makeChangelog)
}

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir
	manifest {
		attributes([
				"Specification-Title": "Just Enough Items",
				"Specification-Vendor": "mezz",
				"Specification-Version": "${version}",
				"Implementation-Title": project.name,
				"Implementation-Version": "${project.version}",
				"Implementation-Vendor" :"mezz",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'FMLAT': 'jei_at.cfg'
		])
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = 'api'
	from sourceSets.api.output

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

task("uploadJars", dependsOn: "build") {
	description = "uploads JARs"
	if (project.hasProperty("local_maven")) {
		apply plugin: 'maven'
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}
