import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id "maven-publish"
	id "com.diffplug.spotless" version "5.14.3"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4'
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'buildtools/ColoredOutput.gradle'

//adds the build number to the end of the version string if on a build server
String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
	build_number = '9999'
}

String semver = "${version_major}.${version_minor}.${version_patch}"

// these two are required for the java plugin to generate jar files with a version
version = "${semver}.${build_number}"
group = 'mezz.jei' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

sourceSets {
	api {
		//The API has no resources
		resources.srcDirs = []
	}
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
	test {
		//The test module has no resources
		resources.srcDirs = []
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

// Mojang ships Java 17 to end users in 1.18+
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

dependencies {
	minecraft([
			group  : "${project.forge_group}",
			name   : 'forge',
			version: "${project.minecraft_version}-${project.forge_version}"
	])
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

minecraft {
	mappings channel: 'official', version: project.minecraft_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			property 'forge.logging.console.level', 'debug'
			workingDirectory file('run')
			mods {
				jei.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
			}
		}
		server {
			property 'forge.logging.console.level', 'debug'
			workingDirectory file('run')
			mods {
				jei.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
			}
		}
	}
}

def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version, 'mc_version': minecraft_version_range, 'forge_version': forge_version_range, "loader_version": loader_version_range
	}
	it.into "$buildDir/resources/main/"
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

classes.configure {
	dependsOn(replaceResources)
}

javadoc {
	source = [sourceSets.main.allJava, sourceSets.api.allJava]
	// prevent java 8's strict doclint for javadocs from failing builds
	options.addStringOption('Xdoclint:none', '-quiet')
}

task makeChangelog(type: GitChangelogTask) {
	fromRepo = file("$projectDir")
	file = file('changelog.html')
	untaggedName = "Current release ${project.version}"
	fromCommit = '2fe051cf727adce1be210a46f778aa8fe031331e'
	toRef = 'HEAD'
	templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
	apiKey = project.findProperty('curseforge_apikey') ?: '0'
	project {
		id = curse_project_id
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'beta'
		addGameVersion "${minecraft_version}"
	}
}

afterEvaluate {
	tasks.curseforge238222.dependsOn makeChangelog

	// lwjgl 3.3.0 has support for apple silicon
	dependencies {
		minecraft('org.lwjgl:lwjgl-jemalloc:3.3.0') {
			force = true
		}
		minecraft('org.lwjgl:lwjgl-openal:3.3.0') {
			force = true
		}
		minecraft('org.lwjgl:lwjgl-opengl:3.3.0') {
			force = true
		}
		minecraft('org.lwjgl:lwjgl-glfw:3.3.0') {
			force = true
		}
		minecraft('org.lwjgl:lwjgl-stb:3.3.0') {
			force = true
		}
		minecraft('org.lwjgl:lwjgl-tinyfd:3.3.0') {
			force = true
		}
	}
}

//import net.minecraftforge.gradle.common.task.ExtractNatives
import net.minecraftforge.gradle.common.util.Utils
import net.minecraftforge.gradle.common.util.VersionJson
import org.apache.commons.io.FileUtils

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.StandardCopyOption

task extractLwjglNatives(type: ExtractLwjglNatives) {
	meta = tasks.extractNatives.meta
	output = tasks.extractNatives.output
}

extractNatives {
	finalizedBy extractLwjglNatives
}

// Extract LWJGL natives from the native JARs provided by LWJGL on Sonatype
abstract class ExtractLwjglNatives extends DefaultTask {
	@InputFile
	abstract RegularFileProperty getMeta();

	@OutputDirectory
	abstract DirectoryProperty getOutput();

	@TaskAction
	void run() {
		println "running ExtractLwjglNatives "
		def os = VersionJson.OS.current
		def osName = os == VersionJson.OS.OSX ? 'macos' : os.name
		def classifier = osName
		if (['aarch64', 'arm64'].contains(System.getProperty('os.arch')))
			classifier += '-arm64'
		def json = Utils.loadJson(meta.getAsFile().get(), VersionJson.class)
		json.getNatives().each {
			if (it.path.startsWith('org/lwjgl')) {
				def version = '3.3.0-20211105.165143-15'
				def type = it.path.split(/\//)[2]
				def path = "org/lwjgl/$type/3.3.0-SNAPSHOT/$type-$version-natives-${classifier}.jar"
				def target = Utils.getCache(getProject(), 'libraries', path)
				def url = new URL("https://oss.sonatype.org/content/repositories/snapshots/$path")
				if (!target.exists()) {
					if (!target.getParentFile().exists()) {
						target.getParentFile().mkdirs()
					}
					FileUtils.copyURLToFile(url, target)
				}
				def rootPath = FileSystems.newFileSystem(target.toPath(), new HashMap<>()).getPath('/')
				Files.walk(rootPath.resolve(osName))
					.filter { Files.isRegularFile(it) }
					.each {
						def outputFile = getOutput().get().getAsFile()
						def filePath = outputFile.toPath().resolve(it.fileName.toString())
						println "overwriting ${filePath}\nwith native version from ${path}"
						Files.copy(it, filePath, StandardCopyOption.REPLACE_EXISTING)
					}
			}
		}
	}
}

jar {
	from sourceSets.main.output
	from sourceSets.api.output

	manifest.attributes([
			'Specification-Title'     : 'Just Enough Items',
			'Specification-Vendor'    : 'mezz',
			'Specification-Version'   : "${semver}",
			'Implementation-Title'    : project.name,
			'Implementation-Version'  : "${project.version}",
			'Implementation-Vendor'   : 'mezz',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Automatic-Module-Name": "mezz.jei",
	])

	finalizedBy 'reobfJar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('sources')
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('api')
	from sourceSets.api.output
	afterEvaluate { finalizedBy reobfApiJar }

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('deobf')
	from sourceSets.main.output
	from sourceSets.api.output
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
	archives deobfJar
}

reobf {
	apiJar { classpath.from(sourceSets.api.compileClasspath) }
	jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
	dependsOn reobfJar
	dependsOn reobfApiJar
}

publishing {
	publications { PublicationContainer publicationContainer ->
		publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
			publication.artifacts = [apiJar, jar, javadocJar, deobfJar, sourcesJar]
		}
	}
	repositories {
		if (project.hasProperty('DEPLOY_DIR')) {
			maven { url DEPLOY_DIR }
		}
	}
}

idea {
	module {
		for (String exclude in ['run', 'out', 'logs']) {
			excludeDirs += file(exclude)
		}
	}
}

test {
	useJUnitPlatform()
	include 'mezz/jei/**'
	exclude 'mezz/jei/lib/**'
}

spotless {
	java {
		target 'src/*/java/mezz/jei/**/*.java'

		endWithNewline()
		trimTrailingWhitespace()
		removeUnusedImports()
	}
}

repositories {
	mavenCentral()
}
