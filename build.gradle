import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		mavenCentral()
	}
	// This is only here while FG is under active development
	configurations.classpath {
		resolutionStrategy {
			cacheDynamicVersionsFor 10, 'seconds'
			cacheChangingModulesFor 0, 'seconds'
		}
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.66'
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'buildtools/ColoredOutput.gradle'

//adds the build number to the end of the version string if on a build server
String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
	build_number = '9999'
}

String semver = "${version_major}.${version_minor}.${version_patch}"
version = "${semver}.${build_number}"
group = 'mezz.jei' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
	mavenCentral()
	maven { url 'https://maven.latmod.com/' }
}

dependencies {
	minecraft([
			group  : "${project.forgegroup}",
			name   : 'forge',
			version: "${project.mcversion}-${project.forgeversion}"
	])
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"

	compileOnly fg.deobf('com.feed_the_beast.mods:ftb-gui-library:1.0.0.18')
}

task replaceResources(type: Copy) {
	outputs.upToDateWhen { false }
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand 'version': version, 'mc_version': minecraft_version_range, 'forge_version': forge_version_range
	}
	into "$buildDir/resources/main/"
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
	finalizedBy replaceResources
}

minecraft {
	mappings channel: 'snapshot', version: project.mcp_mappings

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			mods {
				jei {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		server {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			mods {
				jei {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		data {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			args '--mod', 'jei', '--all', '--output', file('src/generated/resources/')
			mods {
				jei {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

javadoc {
	source = [sourceSets.main.allJava, sourceSets.api.allJava]
	// prevent java 8's strict doclint for javadocs from failing builds
	options.addStringOption('Xdoclint:none', '-quiet')
}

task makeChangelog(type: GitChangelogTask) {
	file = file('changelog.html')
	untaggedName = "Current release ${project.version}"
	fromCommit = '2fe051cf727adce1be210a46f778aa8fe031331e'
	toRef = 'HEAD'
	templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
	apiKey = project.findProperty('curseforge_apikey') ?: '0'
	project {
		id = curse_project_id
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'beta'
	}
}

afterEvaluate {
	tasks.curseforge238222.dependsOn makeChangelog
}

jar {
	from sourceSets.main.output
	from sourceSets.api.output

	manifest {
		attributes([
				'Specification-Title'     : 'Just Enough Items',
				'Specification-Vendor'    : 'mezz',
				'Specification-Version'   : "${semver}",
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : "${project.version}",
				'Implementation-Vendor'   : 'mezz',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}

	finalizedBy 'reobfJar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	archiveClassifier = 'api'
	from sourceSets.api.output

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
	archiveClassifier = 'deobf'
	from sourceSets.main.output
	from sourceSets.api.output
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
	archives deobfJar
}

task uploadJars(dependsOn: build) {
	description = 'Uploads JARs'
	if (project.hasProperty('local_maven')) {
		apply plugin: 'maven'
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}

idea {
	module {
		for (String exclude in ['run', 'out', 'logs']) {
			excludeDirs += file(exclude)
		}
	}
}

test {
	useJUnitPlatform()
	include 'mezz/jei/**'
	exclude 'mezz/jei/lib/**'
}
