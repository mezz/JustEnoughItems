buildscript {
	repositories {
		maven { url = "https://maven.minecraftforge.net" }
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
	}
}

apply plugin: "net.minecraftforge.gradle"

import net.minecraftforge.gradle.common.util.Utils
import net.minecraftforge.gradle.common.util.VersionJson
import org.apache.commons.io.FileUtils

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.nio.file.Path

configurations.all {
	// lwjgl:3.3.0 and java-objc-bridge:1.1 have support for apple silicon
	resolutionStrategy {
		force "ca.weblite:java-objc-bridge:1.1"
		force "org.lwjgl:lwjgl-glfw:3.3.0"
		force "org.lwjgl:lwjgl-jemalloc:3.3.0"
		force "org.lwjgl:lwjgl-openal:3.3.0"
		force "org.lwjgl:lwjgl-opengl:3.3.0"
		force "org.lwjgl:lwjgl-stb:3.3.0"
		force "org.lwjgl:lwjgl-tinyfd:3.3.0"
		force "org.lwjgl:lwjgl:3.3.0"
	}
}

task extractLwjglNatives(type: ExtractLwjglNatives) {
	meta = tasks.extractNatives.meta
	output = tasks.extractNatives.output
}

extractNatives {
	finalizedBy extractLwjglNatives
}

// Extract LWJGL natives from the native JARs provided by LWJGL on Maven Central
abstract class ExtractLwjglNatives extends DefaultTask {
	@InputFile
	abstract RegularFileProperty getMeta();

	@OutputDirectory
	abstract DirectoryProperty getOutput();

	@TaskAction
	void run() {
		def os = VersionJson.OS.current
		def osName = os == VersionJson.OS.OSX ? "macos" : os.name
		def classifier = osName
		def arch = System.getProperty("os.arch")
		if (["aarch64", "arm64"].contains(arch)) {
			classifier += "-arm64"
		}
		def json = Utils.loadJson(meta.getAsFile().get(), VersionJson.class)
		json.getNatives()
				.stream()
				.filter {it.path.startsWith("org/lwjgl") }
				.each {
					def version = "3.3.0"
					def type = it.path.split(/\//)[2]
					def path = "org/lwjgl/$type/$version/$type-$version-natives-${classifier}.jar"
					def target = Utils.getCache(getProject(), "libraries", path)
					def url = new URL("https://repo1.maven.org/maven2/$path")
					if (!target.exists()) {
						if (!target.getParentFile().exists()) {
							target.getParentFile().mkdirs()
						}
						FileUtils.copyURLToFile(url, target)
					}
					def rootPath = FileSystems.newFileSystem(target.toPath(), new HashMap<>()).getPath("/")
					Files.walk(rootPath.resolve(osName))
							.filter { Files.isRegularFile(it) }
							.each {
								def outputFile = getOutput().get().getAsFile()
								def filePath = Path.of("${outputFile.toPath()}${it}")
								def file = filePath.toFile()
								if (!file.exists()) {
									if (!file.getParentFile().exists()) {
										file.getParentFile().mkdirs()
									}
								}
								Files.copy(it, filePath, StandardCopyOption.REPLACE_EXISTING)
							}
				}
	}
}
